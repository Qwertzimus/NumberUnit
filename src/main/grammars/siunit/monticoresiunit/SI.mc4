/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

/***************************************************************************************/
/*                          SI AND NUMBER GRAMMAR
 *
 * this grammar is written by: Michael von Wenckstern
 * the grammar exports the following non-terminals:
 *      + ComplexNumber: "2 + 5i" or "-3/9 - 7/10i" or "-1.5 + 8.7i"
 *
 *      + UnitNumber: "8 km/h" or "- 7/9 kg*m*s^-2" (see JScience Unit)
 *                     the unit number does NOT allow complex numbers
 *
 *      + Number: is a either a complex number or a unit number
 *
 *  CAUTION: token Name is overwritten! "oo" is not allowed as name anymore
 *
 *  for better readability the characteristic of a number (the left part of the dot)
 *  can be written as 3er groups, e.g. "12'345'678" ("12345678" would be also allowed) */
/***************************************************************************************/

package siunit.monticoresiunit;

/**
 * Grammar does not use Literals, since we do not want to have 6
 * different ASTs for numbers
 */
grammar SI {

  // we use here no interface mechanism to make the node final
  // it should not be extended by another grammar later on
  // Todo: add units for hex and floatpoints
  Number =
    FloatPointUnitNumber |
    HexUnitNumber |
    ComplexNumber |
    UnitNumber;


  FloatPointUnitNumber = TFloatPointUnitNumber;
  HexUnitNumber = THexUnitNumber;
  UnitNumber = TUnitNumber | TUnitInf;
  ComplexNumber = TComplexNumber;

/***************************************************************************************/
/*                                 PRIVATE AREA
              the area below is not interesting for reusing this grammar
              it contains only token definitions to be sure that the
              numbers together with its unit are parsed as an atomic block             */
/***************************************************************************************/

  token TFloatPointUnitNumber =
    Significant ('e' | 'E') ('-' | '+') ('0'..'9')+
  ;

  fragment token Significant =
    ('0'..'9') '.' ('0'..'9')+
  ;

  token THexUnitNumber =
    "0x" ('0'..'9' | 'a'..'f' | 'A'..'F')+
  ;

  // the entire unit number is a token, a atomic unit, so we can ensure that it will
  // never be split --> this is important due to later-on expressions where this
  // unit number will be used
  token TUnitNumber =
      RealNumber (Space* Unit)?;

  // between "oo" and unit must be at least one space
  token TUnitInf = ('-' | '+')? 'o' 'o' (Space+ Unit)?;

  // 2.4 + 8/3i -> is a token to be atomic
  token TComplexNumber =
     RealNumber (Space* ('+' | '-') Space* PosNumber 'i')?;

  fragment token RealNumber =
     '-'? PosNumber;

  fragment token PosNumber =
     (PosInt Space* '/' Space* PosInt) |
     (PosInt ('.' ('0'..'9')+ )?) |
     '0' ('.' ('0'..'9')+)?;

  fragment token PosInt =
     UngroupedPosInt |
     GroupedPosInt;

  // 10123456789
  fragment token UngroupedPosInt =
     ('1'..'9') ('0'..'9')*;

  // 10'123'456'789
  fragment token GroupedPosInt =
     ('1'..'9') ('0'..'9')? ('0'..'9')? PosIntGroup+;

  fragment token PosIntGroup =
     '\'' '0'..'9' '0'..'9' '0'..'9';




  fragment token Unit =
     SIUnit | ImperialUnit ;

  // see https://en.wikipedia.org/wiki/Imperial_units
  fragment token ImperialUnit =
     "th" | // thou
     "in" | // inch
     "ft" | // foot
     "yd" | // yard
     "ch" | // chain
     "fur" | // furlong
     "ml" | // mile
     "lea" | // league
     "ftm" | // fathom
     "fl oz" | // fluid ounce
     "gi" | // gill
     "pt" | // pint
     "qt" | // quart
     "gal" | // gallon
     "gr" | // grain
     "dr" | // drachm
     "oz" | // ounce
     "lb" | // pound
     "st" | // stone
     "qr" | // quarter
     "qtr" | // quarter
     "cwt" | // hundredweight
     // "t" | // imperial ton // conflict with metric tonne
     "slug" | // slug
     "°F"  // degree Fahrenheit

  ;

  fragment token SIUnit =
    ((UnitPrefix? SiUnitBaseDimension) | OfficallyAcceptedUnit) ('^' '-'? '0'..'9')? (('/' | '*') ((UnitPrefix? SiUnitBaseDimension) | OfficallyAcceptedUnit) ('^' '-'? '0'..'9')? )* |
    SiUnitDimensionless;

  // see https://en.wikipedia.org/wiki/Metric_prefix
  fragment token UnitPrefix =
    "Y" | // yotta: 10^24
    "Z" | // zetta: 10^21
    "E" | // exa: 10^18
    "P" | // peta: 10^15
    "T" | // tera: 10^12
    "G" | // giga: 10^9
    "M" | // mega: 10^6
    "K" | // kilo: 10^3
    "k" | // kilo: 10^3
    "H" | // hecto: 10^2
    "da" | // deca: 10^1
    "d" | // deci: 10^-1
    "c" | // centi: 10^-2
    "m" | // milli: 10^-3
    // "μ" | // micro: 10^-6 // ToDo: Not working because of character encoding ??
    "n" | // nano: 10^-9
    "p" | // pico: 10^-12
    "f" | // femto: 10^-15
    "a" | // atto: 10^-18
    "z" | // zepto: 10^-21
    "y"  // yocto: 10^-24
  ;

  // see https://en.wikipedia.org/wiki/Non-SI_units_mentioned_in_the_SI
  fragment token OfficallyAcceptedUnit =
    "min" | // minute
    "h" | // hour
    "d" | // day
    "°" | // degree
	// ToDo: fix escapeing
    /*
    "\\'" | // minute
    "\\"" | // second
    */
    "ha" | // hectare
    "l" | // litre
    "L" | // litre
    // "t" | // metric tonne // Deactivated because of collisions with other language
    "au" | // astronomical unit
    "AU" | // astronomical unit
    "Np" | // neper
    "B" | // bel
    "dB" | // decibel
    "eV" | // electronvolt
    "u"  // unified atomic mass unit
    // ToDo: Natural and Atomic units
  ;

  // see https://en.wikipedia.org/wiki/SI_base_unit
  // see https://en.wikipedia.org/wiki/SI_derived_unit
  fragment token SiUnitBaseDimension =
    // Base Units
    "m" | // metre
    "g" | // gramm
    "s" | // second
    "A" | // ampere
    "K" | // kelvin
    "mol" | // mole
    "cd" | // candela

    // Derived Units
    "Hz" | // hertz
    "N" | // newton
    "Pa" | // pascal
    "J" | // joule
    "W" | // watt
    "C" | // coulomb
    "V" | // volt
    "F" | // farad
    "Ω" | // ohm
    "S" | // siemens
    "Wb" | // weber
    "T" | // tesla
    "H" | // henry
    "°C" | // degree Celsius
    "lm" | // lumen
    "lx" | // lux
    "Bq" | // becquerel
    "Gy" | // gray
    "Sv" | // sievert
    "kat"  // katal
  ;

  // see https://en.wikipedia.org/wiki/SI_derived_unit
  fragment token SiUnitDimensionless =
    "rad" | // radian
    "sr"  // steradian
  ;

    fragment token Space =
          (' ' |
          '\t');

   fragment token NamePart =
      ( 'a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$' );

   // forbid 'oo' as name to avoid wrong tokens --> 'oo' is used as infinity symbol
   token Name =
      ( 'a'..'n' | 'p'..'z' | 'A'..'Z' | '_' | '$' ) NamePart |
      ( 'a'..'z' | 'A'..'Z' | '_' | '$' ) ( 'a'..'n' | 'p'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$' ) |
      ( 'a'..'z' | 'A'..'Z' | '_' | '$' ) NamePart NamePart+;

     ////////////////// copied from mc.grammar.lexicals.Lexicals //////////////////////
     // due to the following error when extending from Lexicals:
     // 22:14:50.351 [main] DEBUG SymbolReference - Load full information of 'mc.grammar.lexicals.Lexicals' (Kind de.monticore.languages.grammar.MCGrammarSymbol$GrammarKind).
     // 22:14:50.353 [main] WARN  ROOT - 0xA1038 SymbolReference Could not load full information of 'mc.grammar.lexicals.Lexicals' (Kind de.monticore.languages.grammar.MCGrammarSymbol$GrammarKind).
     // 22:14:50.367 [main] ERROR ROOT - An internal error occured.
     // de.monticore.symboltable.references.FailedLoadingSymbol: Failed to load symbol 'mc.grammar.lexicals.Lexicals'


       fragment token NEWLINE =
         ('\r' '\n' |
         '\r' |
         '\n' ):
       ;

       token WS =
         (' ' |
         '\t' |
          '\r' '\n' |
         '\r' |
         '\n' ) :{_channel = HIDDEN;};

       token SL_COMMENT =
         "//" (~('\n' |
           '\r' )
         )*
         ('\n' |
           '\r' ('\n' )?
         )?

         :{ _channel = HIDDEN;
            if (getCompiler() != null) {
              de.monticore.ast.Comment _comment = new de.monticore.ast.Comment(getText());
              _comment.set_SourcePositionStart(new de.se_rwth.commons.SourcePosition(getLine(), getCharPositionInLine()));
              _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(getToken()));
              getCompiler().addComment(_comment);
            }
          }
       ;

       token ML_COMMENT =
         "/*" (
          NEWLINE |
           ~('*' |
           '\n' |
           '\r' )
         )*
         "*/"
         :{ _channel = HIDDEN;
            if (getCompiler() != null) {
              de.monticore.ast.Comment _comment = new de.monticore.ast.Comment(getText());
              _comment.set_SourcePositionStart(new de.se_rwth.commons.SourcePosition(getLine(), getCharPositionInLine()));
              _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(getToken()));
              getCompiler().addComment(_comment);
            }
          }
       ;

}
